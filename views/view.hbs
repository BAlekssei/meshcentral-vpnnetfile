<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <title>VPN .network — просмотр</title>
  <meta http-equiv="Content-Security-Policy" content="default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self'; connect-src 'self' wss:;">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="/styles/style.css">
  <style>
    body { background:#0b1220; color:#e6edf3; font:14px/1.4 -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif; }
    .wrap{ max-width:1100px; margin:24px auto; padding:0 16px;}
    h1{ margin:0 0 12px; font-size:20px; }
    .muted{ opacity:.8 }
    .btn{ display:inline-block; padding:8px 12px; border-radius:6px; background:#2563eb; color:#fff; text-decoration:none; border:0; cursor:pointer }
    .btn[disabled]{ opacity:.5; cursor:not-allowed }
    .log{ margin-top:12px; padding:12px; border:1px solid #223; border-radius:8px; background:#0d1529; white-space:pre-wrap; overflow-wrap:anywhere }
    pre#out{ margin-top:12px; padding:12px; border:1px solid #223; border-radius:8px; background:#0b1326; white-space:pre; overflow:auto; max-height:65vh }
    .row{ display:flex; gap:10px; align-items:center; flex-wrap:wrap }
    .ok{ color:#22c55e } .err{ color:#ef4444 }
    .mono{ font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace }
  </style>
</head>
<body>
<div class="wrap">
  <h1>VPN .network — просмотр</h1>
  <div class="muted mono" id="devInfo">Устройство: —</div>

  <div class="row" style="margin-top:12px;">
    <button id="btnRead" class="btn">Показать содержимое файла</button>
    <button id="btnAgain" class="btn" style="display:none;">Обновить</button>
    <span id="status" class="muted"></span>
  </div>

  <div id="log" class="log mono" hidden></div>
  <pre id="out" class="mono" aria-live="polite"></pre>
</div>

<!-- Критично: скрипт MeshCentral с API Control -->
<script src="/meshcentral-min.js"></script>
<script>
(function(){
  // ---------- Константы ----------
  const NETFILE_DEFAULT = "/etc/systemd/network/10-vpn_vpn.network";
  const MAXLEN = 131072; // 128 KiB для вывода
  const qs = new URLSearchParams(location.search);
  const nodeid = qs.get("nodeid") || "";
  const NETFILE = qs.get("path") || NETFILE_DEFAULT;

  // ---------- Элементы UI ----------
  const devInfo = document.getElementById("devInfo");
  const btnRead = document.getElementById("btnRead");
  const btnAgain = document.getElementById("btnAgain");
  const statusEl = document.getElementById("status");
  const outEl = document.getElementById("out");
  const logEl = document.getElementById("log");

  if (!nodeid || !nodeid.startsWith("node//")) {
    outEl.textContent = "Ошибка: нет валидного nodeid в URL.";
    btnRead.disabled = true;
    return;
  }
  devInfo.textContent = "Устройство: " + nodeid;

  // ---------- Служебное ----------
  let ctrl = null;           // Control-соединение
  let consId = null;         // Идентификатор консольной сессии
  let reading = false;       // Флаг активного чтения
  let buffer = "";           // Буфер stdout

  function log(msg) {
    logEl.hidden = false;
    logEl.textContent += (logEl.textContent ? "\n" : "") + msg;
  }
  function setStatus(s, cls) {
    statusEl.className = "muted " + (cls || "");
    statusEl.textContent = s;
  }

  // ---------- Подключение к Control ----------
  function ensureControl() {
    return new Promise((resolve, reject) => {
      if (ctrl && ctrl.state === 3) return resolve();
      try {
        ctrl = MeshServerCreateControl();
      } catch (e) {
        outEl.textContent = "Не удалось инициализировать Mesh control API.";
        return reject(e);
      }

      ctrl.onStateChanged = function (state) {
        if (state === 3) resolve();
      };

      ctrl.onMessage = function (/** @type {any} */ msg, /** @type {any} */ _b) {
        // Ловим сообщения по нашей консольной сессии
        if (!msg) return;
        if (msg.action === "console" && msg.id === consId) {
          if (msg.value && typeof msg.value === "string") {
            // Поступающие данные из консоли
            buffer += msg.value;
            outEl.textContent = buffer;
          }
          if (msg.open === false || msg.closed === true) {
            setStatus("сессия закрыта", "muted");
            reading = false;
            btnAgain.style.display = "";
          }
        }
      };

      // Подключаемся
      try {
        ctrl.connect();
      } catch (e) {
        reject(e);
      }
    });
  }

  // ---------- Открытие консоли для узла ----------
  async function openConsole() {
    await ensureControl();
    // Уникальный id для нашей консоли
    consId = "vpnnetfile-" + Math.random().toString(36).slice(2);
    // Просим сервер открыть консоль к агенту.
    // Формат сообщений соответствует тем, что использует стандартная вкладка Console.
    ctrl.send({ action: "console", nodeid: nodeid, id: consId, opentype: 1 }); // opentype 1 = MeshAgent console
  }

  // ---------- Закрытие консоли ----------
  function closeConsole() {
    if (ctrl && consId) {
      try { ctrl.send({ action: "console", id: consId, close: true }); } catch {}
    }
  }

  // ---------- Чтение файла ----------
  async function readFile() {
    if (reading) return;
    reading = true;
    buffer = "";
    outEl.textContent = "";
    setStatus("подключение…");

    try {
      await openConsole();
      setStatus("отправка команды…");
      // Команда встроенной консоли MeshAgent: type <path> [maxlength]
      const cmd = `type "${NETFILE}" ${MAXLEN}\n`;
      ctrl.send({ action: "console", id: consId, value: cmd });

      // Подсказка, если прав не хватило
      setTimeout(() => {
        if (!buffer) {
          log("Если вывод пустой — у агента может не хватать прав для чтения файла. Проверьте, под какой учеткой запущен MeshAgent.");
        }
      }, 1500);

      // Покажем кнопку «Обновить» после первого ответа
      setTimeout(() => { if (buffer) btnAgain.style.display = ""; }, 1200);
      setStatus("чтение…", "ok");
    } catch (e) {
      setStatus("ошибка", "err");
      outEl.textContent = "Не удалось прочитать файл: " + e;
      reading = false;
      closeConsole();
    }
  }

  // ---------- События ----------
  btnRead.addEventListener("click", readFile);
  btnAgain.addEventListener("click", () => { btnAgain.style.display = "none"; readFile(); });

  window.addEventListener("beforeunload", closeConsole);
})();
</script>
</body>
</html>
